@startuml

title __SAMPLE's Class Diagram__\n

  namespace sample {
    class sample.BackgroundUpdater {
        + run()
    }
  }
  

  namespace sample {
    class sample.Constants {
        {static} + BUTTONSTYLE : String
        {static} + EVENTKEYLENGTH : int
        {static} + HEIGHT : int
        {static} + LABELSTYLE : String
        {static} + MACHINETOKENLENGTH : int
        {static} + ORDERKEYLENGHT : int
        {static} + PRESSEDBUTTONSTYLE : String
        {static} + PROGRESSSTYLE : String
        {static} + TEXTFEILDFOCUSEDSTYLE : String
        {static} + TEXTFEILDSTYLE : String
        {static} + WIDTH : int
    }
  }
  

  namespace sample {
    class sample.CustomVBox {
        + CustomVBox()
    }
  }
  

  namespace sample {
    class sample.Machine {
        {static} - backgroundUpdater : BackgroundUpdater
        {static} - error : String
        {static} - eventKey : String
        {static} - location : String
        {static} - machineKey : String
        {static} - machineToken : String
        {static} - processedOrders : ArrayList<String>
        {static} - selectedOrder : String
        {static} - state : String
        {static} + getError()
        {static} + getEventKey()
        {static} + getLocation()
        {static} + getMachineKey()
        {static} + getMachineToken()
        {static} + getProcessedOrders()
        {static} + getSelectedOrder()
        {static} + getState()
        {static} + initializeFromJSON()
        {static} + setError()
        {static} + setEventKey()
        {static} + setLocation()
        {static} + setMachineKey()
        {static} + setMachineToken()
        {static} + setProcessedOrders()
        {static} + setSelectedOrder()
        {static} + setState()
    }
  }
  

  namespace sample {
    class sample.MachineMicrocontrolerHelper {
        {static} - config : SerialConfig
        {static} - location : String
        {static} - microState : String
        {static} - mutex : Semaphore
        {static} - possibleMicroState : Map<Byte, String>
        {static} - serial : Serial
        {static} + getMicrocontrolerState()
        {static} + init()
        {static} + sendNewOrder()
        {static} - getCommandFromOrder()
    }
  }
  

  namespace sample {
    class sample.Main {
        - primaryStage : Stage
        {static} + main()
        + start()
        - nextScenes()
    }
  }
  

  namespace sample {
    class sample.ScannerHelper {
        {static} - gpio : GpioController
        {static} - isOn : boolean
        {static} - pin : GpioPinDigitalOutput
        {static} + scannerOff()
        {static} + scannerOn()
    }
  }
  

  namespace sample {
    class sample.SceneError {
        - label : Label
        + SceneError()
        + getScene()
    }
  }
  

  namespace sample {
    class sample.SceneHome {
        - primaryStage : Stage
        + getScene()
        - nextScene()
    }
  }
  

  namespace sample {
    class sample.SceneOrderCompleted {
        - image : Image
        - primaryStage : Stage
        + getScene()
        - nextScene()
    }
  }
  

  namespace sample {
    class sample.SceneProcessingOrder {
        - label : Label
        - order : JSONObject
        - primaryStage : Stage
        + SceneProcessingOrder()
        + getScene()
        - errorScene()
        - nextScene()
    }
  }
  

  namespace sample {
    class sample.SceneReceiveOrder {
        - orderKey : StringBuffer
        - primaryStage : Stage
        - tempTextField : TextField
        + getScene()
        - backScene()
        - nextScene()
        - onOrderKeyEnter()
    }
  }
  

  namespace sample {
    class sample.ServerHelper {
        {static} - baseURL : String
        + ServerHelper()
        {static} + getMachineData()
        {static} + getOrderInEvent()
        {static} + postOrderCompleted()
        {static} + postUpdateStatus()
    }
  }
  

  sample.CustomVBox -up-|> javafx.scene.layout.VBox
  sample.Main -up-|> javafx.application.Application


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
